Loops are a quick and easy way to repeatedly perform a series of instructions (usually a finite number of times).
The statements for loops provided in JavaScript are:

for statement
while statement
do...while statement
for...in statement
for...of statement

For statement

The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated
by semicolons, followed by one or more statements that will be executed in the loop.

Syntax:
for ([initialization]; [condition]; [final-expression]) {
    statement
}

initialization: An expression or variable declaration that is typically used to initialize a counter variable.
condition: An expression to be evaluated before each loop iteration. If this expression evaluates to true, statement
is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression
evaluates to false, execution skips to the first expression following the for construct.
final-expression: An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation
of condition.

Statement: A statement that is executed as long as the condition evaluates to true.

Example: Print all the integers from 1 to 10.

for (var i = 1; i <= 10; i++) {
    console.log(i);
}

All three expressions in the head of the for loop are optional. For example, in the initialization block it is not required
to initialize variables:

var i = 0;

for (; i < 10; i++) {
    console.log(i);
}

Like the initialization block, the condition block is also optional:
for (var i = 1;; i++) {
    if (i > 10) {
        break;
    }

    console.log(i);
}

All three blocks can be omitted:
var i = 1;

for (;;) {
    if (i > 10) {
        break;
    }

    console.log(i);

    i++;
}

while statement

The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true.
The condition is evaluated before executing the statement.

Syntax:
while (condition) {
    statement
}

condition: An expression evaluated before each pass through the loop. If this condition evaluates to true, statement is
 executed. When condition evaluates to false, execution continues with the statement after the while loop.

Statement: A statement that is executed as long as the condition evaluates to true.

Example: Print all the integers from 1 to 10.

var i = 1;

while (i <= 10) {
    console.log(i);

    i++;
}

do...while statement

The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false.
The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.

Syntax:
do {
    statement
} while (condition);

statement: A statement that is executed as long as the condition evaluates to true.

condition: An expression evaluated after each pass through the loop. If condition evaluates to true, the statement is re-executed.
When condition evaluates to false, control passes to the statement following the do...while.

Example: Print all the integers from 1 to 10.

var i = 1;

do {
    console.log(i);

    i++;
} while (i <= 10);

for...in statement

The for...in statement iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements
can be executed.

Syntax:
for (variable in object) {
    ...
}

variable: A different property name is assigned to variable on each iteration.

object: Object whose enumerable properties are iterated.

Example

Iterating over the object's enumerable properties:
var actress = {
    first_name: "Julia",
    last_name: "Roberts",
    date_of_birth: "October 28, 1967",
    nationality: "American",
    first_movie: "Satisfaction"
};

for (var prop in actress) {
    console.log("actress." + prop + " = " + actress[prop]);
}

The output is:
actress.first_name = Julia
actress.last_name = Roberts
actress.date_of_birth = October 28, 1967
actress.nationality = American
actress.first_movie = Satisfaction

for...of statement

The for...of statement creates a loop Iterating over iterable objects (including Array, Map, Set, String, TypedArray,
arguments object and so on), invoking a custom iteration hook with statements to be executed for the value of each distinct property.

Syntax:
for (variable of iterable) {
    statement
}

variable: On each iteration a value of a different property is assigned to variable.

object: Object whose enumerable properties are iterated.

Example

Iterating over a Map:
'use strict';

let actress = new Map([
    ["first_name", "Julia"],
    ["last_name", "Roberts"],
    ["date_of_birth", "October 28, 1967"],
    ["nationality", "American"],
    ["first_movie", "Satisfaction"]
]);

for (let info of actress) {
    console.log(info);
}

The output is:
[ 'first_name', 'Julia' ]
[ 'last_name', 'Roberts' ]
[ 'date_of_birth', 'October 28, 1967' ]
[ 'nationality', 'American' ]
[ 'first_movie', 'Satisfaction' ]
