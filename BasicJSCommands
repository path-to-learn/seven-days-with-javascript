/*
 * Folloiwng are some of the basics of JS lang.
 * 
 * These are some simple JS concepts which can easily go wrong
 * and can be frustating.
 * JavaScript is not compile time language but gets executed on runtime environment
 * provided by Browser. JavaScript objects too are temporarily stored on browser provided memory space.
 *
 * FireFox scratchpad has been used for validating following commands.
 * 
 */

// ###############        Following are the variable and type basics #########################//

var aVar;
console.log(aVar); // defines var as undefined
console.log(typeof aVar); // of type undefined. prints 'undefined'
a = null;
console.log(typeof a); // prints 'object' // JS error, may be :|
a = 10;
console.log(typeof a); // prints number
a = "bc";
console.log(typeof a); // prints string

// note the usage of == and === (more precise way of checking)
var b = 10;
var c = "10";

if (b==c) // returns true
  {
    console.log("b==c returns true as only value is matched not type ");    
  }

if (!(b===c)) { // returns negation of false hence printing if block
  console.log ("b===c returns false as both value and type is matched");
}

var d = "10";
if (d===c) // returns true
  {
    console.log("Both value and type are matched "); 
  }

// ###############        Following are the JS Object basics #########################//

// JS Objects are free form - not bound to class
// These objects are basically on browser provided memory

var isObj = {}; // obj literal
console.log(isObj); // prints Object {}
isObj.name = "Tom";
isObj.age = 25;
console.log (isObj); // prints the object
console.log ("Age of "+ isObj.name +" is : " + isObj.age); // prints the name,age attribute


// Another way of defining objects:

var defObj = {
  prop1: "Hello",
  prop2: 123,
  prop3: true
};

console.log (defObj); // prints the defObj
console.log ("value of prop1 is:" + defObj.prop1);
console.log ("Access property that does not exists is :" + defObj.prop); // brings undefined but no complain

// New properties can be added to objects directly
defObj.prop4 = "New Property";
console.log ("Value of prop4 is :" + defObj.prop4);
console.log ("Udated object is : " + defObj); // this is now not more object literal

// Accessing property using the [] notation
console.log (" Using the [] notation the prop1 is : " + defObj["prop1"]); // same is defObj.prop1 which is "Hello"

//## Note:  use [] notation when key is invlaid identifier or prop name is dynamic

//examples:
var propName = "prop1";
console.log(defObj[propName]); // prints the prop1 value, however defObject.propName is undefined.


// Defining the inner object:
var myObj = {
  "name": "Sam",
  "age": "21",
  "sex": null,
  "address": {
    "street" : "enterprise way",
    "city" : "sunnyvale"
  }
};

console.log(myObj.address.street); // prints street of inner object
console.log(myObj.address["city"]) // prints city

// you also add adhoc property to inner project
myObj.address.newInner = "new Inner Property";
console.log(myObj.address["newInner"]) // prints new property

//object variables are equal if they point to same object in memory
var myObj2;
myObj2 = myObj;
if (myObj2===myObj) {
  console.log("Variables are equal and point to same object in memory !");
}

// w.r.t to object - if property is not defined in object, accessing that poperty name via object will
// fetch 'undefined' but if the property is defined without any value, it can give null.

console.log (myObj.sex) // gives null, property defined but no value
console.log(myObj.emailId) // gives undefined, property not defined for object

// Now remiving the property sex from myObj
// defining property to undefined will not actually delete it:
myObj.sex = undefined;
console.log(myObj);
// but 'delete propertyName' operator will do
delete myObj.sex;
console.log(myObj); // now object does not have deleted property.


// ###############        Following are the JS Array basics #########################//

var jsArr = ["hello", "java script", "reader"];

console.log(jsArr[0]); // prints hello
console.log(jsArr[3]); // prints undefined
jsArr[3] = "enjoying";
console.log(jsArr); // adds the 3rd element in array now, Interesting !!!

// array is actually an object, with indexes as placeholder values
// but
// console.log(jsArr.0); // returns syntax error because dot operator cannot be used 
// when property is number
// however, [] notation can

console.log(jsArr["0"]); // returns hello

// Strangely how does console.log(jsArr[0]); works
// In  this case, JS implicitly converts 0 to string 0 and then processes.... :D

// ## Note:
// Basically when you are creating a javascript array, you indirectly create an object with property
// name as numbers starting from zero

// For an array, you can add string as property key but it will not change the length of array !!!



// ###############        Following are the JS function basics #########################//

//sayHi("Sam"); This will also work even if js engine registers function name after call is registered.

function sayHi(name, age) {
  console.log("Hi " + name + ", Your age is " + age);
}

sayHi("Sam"); // it calls the above function but provides age as 'undefined' !!!
sayHi("Sam",21,"male"); // ignores the 3rd param but still calls the function !!

// Therefore, overloaded functions not possible in javascript

// ## Note
// Function itself is a value in javascript

var f = function foo() { // this is function expression, in fact foo can be removed
  console.log("Am in foo");
};
  
f(); // calls the f, marking it as function call

// now removing foo, we get anonymous function like below:
// but this gets evaluated one time, after which f is assigned value...
// after that function cannot be called...

// f = function () {
//        console.log("Am in foo");
//            };


// Passing the function as arguement:

var g = function(name) {
  console.log("Hello " + name);
}
var execute = function(fn, name) {
  fn(name);
};
execute(g, "Samy");

// function on objects

var myObjj = {
  "tprop" : true
};
myObjj.myMeth = function() {
  console.log("function in object");
};
myObjj.myMeth(); // prints the above message


// Consider following example:
var person = {
  "name" : "Sam",
  "last" : "kumar",
  "getFullName" : function() {
    return person.name + " " + person.last
  },
  "address" : {
    "street" : "1063 Morse",
    "city" : "sunnyvale",
    "state" : "CA"
  },
  "isFromState" : function(state) {
    return this.address.state === state;
  }
};

// in order to make this object still return function getfullName, even when the object person
// is pointed to empty object, e.g., person = {}, use following line:
// return this.name + " " + this.last

console.log(person.isFromState("CA"));
console.log(person.isFromState("WA"));

//JavaScript has implicit variables called 
  // arguements
  // this

var add = function(a,b) {
  var i , sum =0;
  for(i=0;i<arguments.length;i++) { // this takes all the values passed via function call
    sum += arguments[i];
  }
  return sum;
};
console.log(add(10,20,30,40,50));
